static int[] ComputeLPSArray(string s)
    {
        int n = s.Length;
        int[] lps = new int[n];
        lps[0] = 0;

        for (int i = 1; i < n; i++)
        {
            int j = lps[i - 1];
            while (j > 0 && s[i] != s[j])
            {
                j = lps[j - 1];
            }
            if (s[i] == s[j]) j++;
            lps[i] = j;
        }
        return lps;
    }


    static public int Period(this string s)
    {
        int n = s.Length;
        int[] P = ComputeLPSArray(s);
        int longestBorder = P[n - 1];
        int period = n - longestBorder;

        return period;
    }


static public int MaxPower(this string s, out int startIndex, out int endIndex)
{
    startIndex = 0;
    endIndex = 1;

    if (string.IsNullOrEmpty(s))
    {
        endIndex = 0;
        return 0;
    }

    int n = s.Length;
    int maxPower = 1;
    int bestStart = 0;
    int bestEnd = 1;

    // Dla każdego możliwego początku podsłowa
    for (int start = 0; start < n; start++)
    {
        // Oblicz tablicę KMP dla sufiksu zaczynającego się od pozycji start
        // Robimy to bezpośrednio na indeksach, bez tworzenia podciągu
        int suffixLength = n - start;
        int[] P = new int[suffixLength];

        // Algorytm KMP bezpośrednio na indeksach
        int j = 0;
        for (int i = 1; i < suffixLength; i++)
        {
            while (j > 0 && s[start + i] != s[start + j])
            {
                j = P[j - 1];
            }

            if (s[start + i] == s[start + j])
            {
                j++;
            }

            P[i] = j;
        }

        // Sprawdź wszystkie prefiksy tego sufiksu
        for (int length = 1; length <= suffixLength; length++)
        {
            int end = start + length;

            // Border dla podsłowa s[start...end-1] to P[length-1]
            int longestBorder = P[length - 1];
            int period = length - longestBorder;

            // Sprawdź, czy podsłowo jest potęgą
            if (period > 0 && length % period == 0)
            {
                int power = length / period;
                if (power > maxPower)
                {
                    maxPower = power;
                    bestStart = start;
                    bestEnd = end;
                }
            }
        }
    }

    startIndex = bestStart;
    endIndex = bestEnd;
    return maxPower;
}




   public static List<int> KMPSearch(string text, string pattern)
    {
        int n = text.Length;
        int m = pattern.Length;
        
        List<int> results = new List<int>();
        
        if (m == 0 || n == 0)
            return results;
        

        int[] lps = ComputeLPS(pattern);
        
        int i = 0; // indeks dla tekstu
        int j = 0; // indeks dla wzorca
        
        while (i < n)
        {
            if (pattern[j] == text[i])
            {
                i++;
                j++;
            }
            
            if (j == m)
            {
                // Znaleziono wzorzec
                results.Add(i - j);
                j = lps[j - 1];
            }
            else if (i < n && pattern[j] != text[i])
            {
                if (j != 0)
                {
                    j = lps[j - 1];
                }
                else
                {
                    i++;
                }
            }
        }
        
        return results;
    }
